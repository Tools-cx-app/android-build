name: Make NDK APE
run-name: Make NDK-r${{inputs.ndk_version}} with llvm-${{inputs.llvm_version}}-ape
on:
  workflow_dispatch:
    inputs:
      ndk_version:
        required: true
        default: '28'
      llvm_version:
        required: true
        default: '19.1.7'

jobs:
  make:
    name: Make NDK MUSL(aarch64)
    runs-on: ubuntu-latest
    steps:
      - name: Get NDK and LLVM
        run: |
          curl -LkSs https://dl.google.com/android/repository/android-ndk-r${{inputs.ndk_version}}-linux.zip >ndk.zip && unzip -q ndk.zip
          curl -LkSs https://github.com/zongou/build/releases/download/llvm/clang+clang-tools-extra+lld-${{inputs.llvm_version}}-aarch64-linux-musl.tar.xz | xz -d | tar -x

      - name: Make NDK APE
        run: |
          NDK="${PWD}/android-ndk-r${{inputs.ndk_version}}"
          HOST_TOOLCHAIN="${PWD}/clang+clang-tools-extra+lld-${{inputs.llvm_version}}-ape"
          NDK_TOOLCHAIN="${NDK}/toolchains/llvm/prebuilt/linux-x86_64"

          find "${NDK_TOOLCHAIN}/bin" -type f | while IFS= read -r file; do
              bname="$(basename "${file}")"
              if [ -f "${HOST_TOOLCHAIN}/bin/${bname}" ] && file "${file}" | grep -q 'ELF'; then
                  echo "Replacing ${bname}"
                  cp "${HOST_TOOLCHAIN}/bin/${bname}" "${file}"
              elif file "${file}" | grep -q 'Bourne-Again shell script'; then
                  echo "Replacing SheBang ${bname}"
                  sed -i 's,#!/usr/bin/env bash,#!/usr/bin/env sh,' "${file}"
              fi
          done

          ## Fix: ERROR: Unknown host CPU architecture: aarch64
          sed -i 's/arm64)/arm64|aarch64)/' "${NDK}/build/tools/ndk_bin_common.sh"

          ## Remove unused resource
          rm -rf "${NDK_TOOLCHAIN}/python3"
          rm -rf "${NDK_TOOLCHAIN}/musl"
          find "${NDK_TOOLCHAIN}/lib" -maxdepth 1 -mindepth 1 -not -name clang -exec rm -rf {} \;
          find "${NDK_TOOLCHAIN}" -maxdepth 5 -path "*/lib/clang/[0-9][0-9]/lib/*" -not -name linux -exec rm -rf {} \;

          curl -LkSs https://cosmo.zip/pub/cosmos/bin/make > "${NDK}/prebuilt/linux-x86_64/bin/make" && chmod +x "${NDK}/prebuilt/linux-x86_64/bin/make"
          mkdir -p "${NDK_TOOLCHAIN}/python3/bin"
          curl -LkSs https://cosmo.zip/pub/cosmos/bin/python >"${NDK_TOOLCHAIN}/python3/bin/python3" && chmod +x "${NDK_TOOLCHAIN}/python3/bin/python3"

          mv android-ndk-r${{inputs.ndk_version}} android-ndk-r${{inputs.ndk_version}}-ape

      - name: Archive
        run: |
          tar -c android-ndk-r${{inputs.ndk_version}}-ape >android-ndk-r${{inputs.ndk_version}}-ape.tar

      - uses: actions/upload-artifact@v4
        with:
          name: android-ndk-r${{inputs.ndk_version}}-ape.tar
          path: android-ndk-r${{inputs.ndk_version}}-ape.tar

  test:
    needs: make
    name: Test on ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        ## runner: [ubuntu-24.04, ubuntu-24.04-arm, macos-14, windows-latest]
        runner: [ubuntu-24.04-arm]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Extract artifacts
        run: tar -xf android-ndk-r${{inputs.ndk_version}}-ape.tar

      - name: Test
        shell: bash
        run: |
          NDK="${PWD}/android-ndk-r${{inputs.ndk_version}}-ape"
          NDK_TOOLCHAIN="${NDK}/toolchains/llvm/prebuilt/linux-x86_64"

          grep '"triple"' <"${NDK}/meta/abis.json" | awk -F"\"" '{print $4}' | while IFS= read -r triple; do
              # find ${NDK_TOOLCHAIN}/sysroot/usr/lib -maxdepth 1 -mindepth 1 | while IFS= read -r triple; do
              target=$(basename "${triple}" | sed 's/arm/armv7a/')35

              echo "Test ${target}-clang"
              o="helloc-${target}"
              "${NDK_TOOLCHAIN}/bin/${target}-clang" -o "$o" tests/hello.c
              file "$o"

              echo "Test ${target}-clang++"
              o="hellocpp-${target}"
              "${NDK_TOOLCHAIN}/bin/${target}-clang++" -xc++ -o "$o" tests/hello.cpp
              file "$o"
          done

      - uses: zongou/run-vscode-server@0.0.3
        name: Open VS Code server to Handle Failure (Run on any failure)
        if: ${{ failure() }}

  release:
    needs: test
    name: Release
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
      
    - name: Compress
      run: |
        xz -T0 android-ndk-r${{inputs.ndk_version}}-ape.tar

    - name: Release
      uses: ncipollo/release-action@v1.15.0
      with:
        tag: "ndk"
        artifacts: android-ndk-r${{inputs.ndk_version}}-ape.tar.xz
        allowUpdates: true
        replacesArtifacts: true
        body: |
          [action](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})

    - uses: zongou/run-vscode-server@0.0.3
      name: Open VS Code server to Handle Failure (Run on any failure)
      if: ${{ failure() }}